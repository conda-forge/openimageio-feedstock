From 485244087a5bd2fea5803d6eb4c9b0f2312bdb91 Mon Sep 17 00:00:00 2001
From: Mark Harfouche <mark.harfouche@gmail.com>
Date: Mon, 2 Oct 2023 08:57:10 -0400
Subject: [PATCH] Use modern FindPython from CMake 3.12

This really helps with cross compilation and virtual environments
---
 src/cmake/externalpackages.cmake |  3 +-
 src/cmake/pythonutils.cmake      | 50 ++------------------------------
 2 files changed, 4 insertions(+), 49 deletions(-)

diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index d9a18aa2d..2df164455 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -156,8 +156,7 @@ else ()
     message (STATUS "Using internal PugiXML")
 endif()
 
-# From pythonutils.cmake
-find_python()
+find_package(Python COMPONENTS Interpreter Development)
 
 
 ###########################################################################
diff --git a/src/cmake/pythonutils.cmake b/src/cmake/pythonutils.cmake
index 5799e29f2..a882bf80c 100644
--- a/src/cmake/pythonutils.cmake
+++ b/src/cmake/pythonutils.cmake
@@ -4,7 +4,6 @@
 
 # Python-related options.
 option (USE_PYTHON "Build the Python bindings" ON)
-set (PYTHON_VERSION "" CACHE STRING "Target version of python to find")
 option (PYLIB_INCLUDE_SONAME "If ON, soname/soversion will be set for Python module library" OFF)
 option (PYLIB_LIB_PREFIX "If ON, prefix the Python module with 'lib'" OFF)
 set (PYMODULE_SUFFIX "" CACHE STRING "Suffix to add to Python module init namespace")
@@ -15,49 +14,6 @@ else ()
 endif ()
 
 
-# Find Python. This macro should only be called if python is required. If
-# Python cannot be found, it will be a fatal error.
-macro (find_python)
-    if (NOT VERBOSE)
-        set (PythonInterp_FIND_QUIETLY true)
-        set (PythonLibs_FIND_QUIETLY true)
-    endif ()
-
-    # Attempt to find the desired version, but fall back to other
-    # additional versions.
-    unset (_req)
-    if (USE_PYTHON)
-        set (_req REQUIRED)
-        if (PYTHON_VERSION)
-            list (APPEND _req EXACT)
-        endif ()
-    endif ()
-    checked_find_package (Python ${PYTHON_VERSION}
-                          ${_req}
-                          COMPONENTS Interpreter Development
-                          PRINT Python_VERSION Python_EXECUTABLE
-                                Python_LIBRARIES
-                                Python_Development_FOUND
-                                Python_Interpreter_FOUND )
-
-    # The version that was found may not be the default or user
-    # defined one.
-    set (PYTHON_VERSION_FOUND ${Python_VERSION_MAJOR}.${Python_VERSION_MINOR})
-
-    # Give hints to subsequent pybind11 searching to ensure that it finds
-    # exactly the same version that we found.
-    set (PythonInterp_FIND_VERSION PYTHON_VERSION_FOUND)
-    set (PythonInterp_FIND_VERSION_MAJOR ${Python_VERSION_MAJOR})
-
-    if (NOT DEFINED PYTHON_SITE_DIR)
-        set (PYTHON_SITE_DIR "${CMAKE_INSTALL_LIBDIR}/python${PYTHON_VERSION_FOUND}/site-packages/OpenImageIO")
-    endif ()
-    message (VERBOSE "    Python site packages dir ${PYTHON_SITE_DIR}")
-    message (VERBOSE "    Python to include 'lib' prefix: ${PYLIB_LIB_PREFIX}")
-    message (VERBOSE "    Python to include SO version: ${PYLIB_INCLUDE_SONAME}")
-endmacro()
-
-
 ###########################################################################
 # pybind11
 
@@ -133,10 +89,10 @@ macro (setup_python_module)
             )
 
     install (TARGETS ${target_name}
-             RUNTIME DESTINATION ${PYTHON_SITE_DIR} COMPONENT user
-             LIBRARY DESTINATION ${PYTHON_SITE_DIR} COMPONENT user)
+             RUNTIME DESTINATION ${Python_SITELIB} COMPONENT user
+             LIBRARY DESTINATION ${Python_SITELIB} COMPONENT user)
 
-    install(FILES __init__.py DESTINATION ${PYTHON_SITE_DIR})
+    install(FILES __init__.py DESTINATION ${Python_SITELIB})
 
 endmacro ()
 
